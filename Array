/*

*/


**************************************************************************************
/*
Given an array having both positive and negative integers. 
The task is to compute the length of the largest subarray with sum 0.
Input:
N = 8
A[] = {15,-2,2,-8,1,7,10,23}
Output: 5
Explanation: The largest subarray with
sum 0 will be -2 2 -8 1 7.
*/

class GfG {
    int maxLen(int arr[], int n) {
        int max=0;
        int sum=0;
        HashMap<Integer,Integer> map=new HashMap<>();
        map.put(sum,-1);
        for(int i=0;i<n;i++){
            sum+=arr[i];
            if(sum==0){
                max=i+1;
            }
            if(map.containsKey(sum)){
               max=Math.max(max,i-map.get(sum));
            }else{
                 map.put(sum,i);
            }  
        }
        return max;
    }
}

**************************************************************************

/*
 Search in Rotated Sorted Array
*/

class Solution {
    public int search(int[] nums, int target) {
        int s=0;
        int e=nums.length-1;
        while(s<=e){
            int mid=s+(e-s)/2;
            if(nums[mid]==target) return mid;

            if( nums[s] <= nums[mid]){
               if(nums[s]<=target && target<nums[mid]){
                    e=mid-1;
               }else{
                   s=mid+1;
               }
            }else{
                if(nums[mid]<target && target<=nums[e]){
                    s=mid+1;
                }else{
                    e=mid-1;
                }
            }
        }
        return -1;
    }
}

*******************************************************************************************

/*
Given an array arr[] of N non-negative integers representing the height 
of blocks. If width of each block is 1, compute how much water can be 
trapped between the blocks during the rainy season. 
*/

class Solution {
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
       
      //left part
         int l[]=new int[n];
        l[0]=arr[0];
        for(int i=1;i<n;i++){
            l[i]=Math.max(arr[i],l[i-1]);
        }
        // right part
        int r[]=new int[n];
        r[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            r[i]=Math.max(r[i+1],arr[i]);
        }  
        
        long trpWtr=0;
        for(int i=0;i<n;i++){
            int waterlevel=Math.min(l[i],r[i]);
            trpWtr+=waterlevel-arr[i]; 
        }
        
        return trpWtr;
        
    } 
}

