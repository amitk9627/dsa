/*
Given an array arr[] of N non-negative integers representing the height 
of blocks. If width of each block is 1, compute how much water can be 
trapped between the blocks during the rainy season. 
*/

class Solution{
    
    // arr: input array
    // n: size of array
    // Function to find the trapped water between the blocks.
    static long trappingWater(int arr[], int n) { 
       
      //left part
         int l[]=new int[n];
        l[0]=arr[0];
        for(int i=1;i<n;i++){
            l[i]=Math.max(arr[i],l[i-1]);
        }
        // right part
        int r[]=new int[n];
        r[n-1]=arr[n-1];
        for(int i=n-2;i>=0;i--){
            r[i]=Math.max(r[i+1],arr[i]);
        }  
        
        long trpWtr=0;
        for(int i=0;i<n;i++){
            int waterlevel=Math.min(l[i],r[i]);
            trpWtr+=waterlevel-arr[i];
            
            
        }
        
        return trpWtr;
        
    } 
}

